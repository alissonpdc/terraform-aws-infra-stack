name: "[2] CONTINUOUS DEPLOYMENT"

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  TerraformPlan:
    runs-on: ubuntu-latest
    environment: terraform-aws-infra-webapp-secrets-env
    steps:
      - uses: actions/checkout@v3
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}

      - name: Terraform Plan
        run : | 
          cd terraform
          terraform init
          terraform plan -out plan.out -input=false
      
      - name: Upload plan.out
        run : | 
          echo "==> Uploading plan.out to S3 Bucket"
          aws s3 cp terraform/plan.out s3://alissonpdc-terraform-remote-state-bucket/terraform-aws-infra-webapp/

  TerraformApply:
    runs-on: ubuntu-latest
    environment: terraform-aws-infra-webapp-secrets-env
    needs:
      - TerraformPlan
    steps:
      - uses: actions/checkout@v3

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-1
          role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}

      - name: Install eksctl
        run: |
          ARCH=amd64
          PLATFORM=$(uname -s)_$ARCH
          curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
          tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
          mv /tmp/eksctl /usr/local/bin

      - name: Download plan.out
        run : | 
          echo "==> Downloading plan.out from S3 Bucket"
          cd terraform
          aws s3api get-object --bucket alissonpdc-terraform-remote-state-bucket --key terraform-aws-infra-webapp/plan.out plan.out

      - name: Terraform Deploy
        run : | 
          cd terraform
          terraform init
          terraform apply plan.out

  # ManageCredentials:
  #   runs-on: ubuntu-latest
  #   environment: terraform-aws-infra-webapp-secrets-env
  #   needs:
  #     - TerraformApply
  #   steps:
  #     - uses: actions/checkout@v3

  #     - uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-region: us-east-1
  #         role-to-assume: ${{ secrets.AWS_OIDC_ROLE }}

  #     - name: Install eksctl
  #       run: |
  #         ARCH=amd64
  #         PLATFORM=$(uname -s)_$ARCH
  #         curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
  #         tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
  #         mv /tmp/eksctl /usr/local/bin

      # - name: Manage EKS RBAC credentials
      #   run: |
      #     echo "==> Adding EKS cluster to kubecl context"
      #     aws eks update-kubeconfig --region us-east-1 --name eks-cluster
          
      #     echo "==> Printing current auth-map"
      #     eksctl get iamidentitymapping --cluster eks-cluster --region=us-east-1

      #     echo "==> Applying new RBAC to cluster"
      #     kubectl apply -f eks-full-access.yaml
          
      #     echo "==> Adding new role to auth-map"
      #     eksctl create iamidentitymapping --cluster eks-cluster --region=us-east-1 \
      #       --arn arn:aws:iam::211125453026:role/aws-reserved/sso.amazonaws.com/AWSReservedSSO_AdministratorAccess_018645c6c1d0e0fc \
      #       --username admin --group eks-full-access-group --no-duplicate-arns

      #     echo "==> Adding new user to auth-map"
      #     eksctl create iamidentitymapping --cluster eks-cluster --region=us-east-1 \
      #       --arn arn:aws:iam::211125453026:user/console \
      #       --username admin --group eks-full-access-group --no-duplicate-arns

      #     echo "==> Printing updated auth-map"
      #     eksctl get iamidentitymapping --cluster eks-cluster --region=us-east-1

      #     echo "==> Printing aws-auth"
      #     kubectl get configmap/aws-auth -o yaml -n kube-system 
        